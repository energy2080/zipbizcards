
exports.once=function(event,callback){
exports.on(event,c=function(e){
exports.off(event,c),
callback(e);
});
},

_.extend(exports,Backbone.Events),

exports.navigator={},

exports.SLIDEMENU_PUSH=1,
exports.SLIDEMENU_COVER=2,

Alloy.Globals.crux||(
Alloy.Globals.crux=exports);


var menu,
currentController,



defaultWindow,
rootWindow,
rootView,
menuWindow,slideMenuStyle=exports.SLIDEMENU_COVER,slideMenuSpeed=400,defaultMenuWidth=225,
resets={},
device={
height:!0?Ti.Platform.displayCaps.getPlatformHeight():Ti.Platform.displayCaps.getPlatformHeight()/(Ti.Platform.displayCaps.dpi/160),
width:!0?Ti.Platform.displayCaps.getPlatformWidth():Ti.Platform.displayCaps.getPlatformWidth()/(Ti.Platform.displayCaps.dpi/160)};


exports.device=device,


Alloy.Globals.device=device,
Alloy.Globals.jobBoxWidth=!0?290:device.width-30;

var util={
log:function(message){
console.log("::CRUX:: "+message);
},
isString:function(object){
return"string"==typeof object;
},
isView:function(object){
return"Ti.UI.View"==object.getApiName()||"Ti.UI.ScrollView"==object.getApiName();
},
isWindow:function(object){
return"Ti.UI.Window"==object.getApiName();
},
isTabGroup:function(object){
return"Ti.UI.TabGroup"==object.getApiName();
},
isNavWindow:function(object){
return"Ti.UI.iOS.NavigationWindow"==object.getApiName();
}};


function getController(nameOrController,args){
Ti.API.info("getController @@@ "+nameOrController);

try{
if(nameOrController.__iamalloy)
return nameOrController;
;
}catch(e){}

var c=Alloy.createController(nameOrController,args);





return c.getView().UI&&(c=c.getView()),c;
}

exports.navigator.openWindow=function(nameOrControllerOrView,args){




return currentController=getController(nameOrControllerOrView,args),currentController.getView().open(),currentController;
},

exports.createTabGroup=function(args){




















return rootWindow=Ti.UI.createTabGroup(args),exports.navigator.openWindow=function(nameOrControllerOrView,args){exports.hideOpenMenu&&exports.hideOpenMenu(),util.log("Opening in a Tab"),0?getController(nameOrControllerOrView,args).getView().open():util.isWindow(nameOrControllerOrView)?rootWindow.activeTab.openWindow(nameOrControllerOrView):rootWindow.activeTab.openWindow(getController(nameOrControllerOrView,args).getView())},rootWindow;
},

exports.createNavigationWindow=function(args){

















return 0?rootWindow=Ti.UI.createWindow(args.window):(rootWindow=Ti.UI.iOS.createNavigationWindow(args),rootWindow.clipMode=Ti.UI.iOS.CLIP_MODE_DISABLED),exports.navigator.openWindow=function(nameOrControllerOrView,args){exports.hideOpenMenu&&exports.hideOpenMenu(),util.log("Opening in a Nav Window"),rootWindow.openWindow(getController(nameOrControllerOrView,args).getView())},rootWindow;
},

exports.createButton=function(args){





return args.padding&&(args.title="   "+args.title+"   "),Ti.UI.createButton(args);
},

exports.setSlideMenuStyle=function(value){
slideMenuStyle=value==(exports.SLIDEMENU_PUSH||exports.SLIDEMENU_COVER)?value:exports.SLIDEMENU_COVER;
},

exports.setSlideMenuSpeed=function(value){
slideMenuSpeed=value||slideMenuSpeed;
},

exports.close=function(){

currentController&&(
util.log("::CRUX:: Cleaning up controller: "+currentController.__controllerPath),

"function"==typeof currentController.cleanUp&&
currentController.cleanUp(),

util.isWindow(currentController.getView())?
currentController.getView().close():

currentController.getView().parent&&
currentController.getView().parent.remove(currentController.getView()),



currentController.off(),
currentController.destroy(),
currentController=null);

},

exports.createRootView=function(args){












return args.src?(rootView=getController(args.src).getView(),rootView.applyProperties(args)):rootView=Ti.UI.createView(args),rootView.UI&&(rootView=rootView.getView()),rootView;
},

exports.navigator.open=function(nameOrControllerOrView,args){
var newController=getController(nameOrControllerOrView,args);




























return util.log("Opening a "+newController.getView().getApiName()),util.isWindow(newController.getView())||util.isNavWindow(newController.getView())||util.isTabGroup(newController.getView())?newController.getView().open():(rootView||rootWindow?(rootView||rootWindow).add(newController.getView()):newController.getView().open(),exports.close()),currentController=newController,exports.trigger("open",{controller:newController,view:newController.getView()}),newController=null,currentController;
},

exports.createSlideMenu=function(args){
























































































































function hideAllMenus(){
menu.leftMenu&&menu.leftMenu.setVisible(!1),
menu.rightMenu&&menu.rightMenu.setVisible(!1),
menu.bottomMenu&&menu.bottomMenu.setVisible(!1),
menu.topMenu&&menu.topMenu.setVisible(!1);
}

function showRightMenu(){

if(!menu.rightMenu){
throw"No RightSlideMenu defined!";
return;
}





if(hideAllMenus(),menu.rightMenu.setVisible(!0),slideMenuStyle==exports.SLIDEMENU_PUSH){

menu.rightMenu.left=null,
menu.rightMenu.right=0,
menu.rightMenu.width=menu.rightMenu.width||device.width-50,
menu.rightMenu.opacity=1;

var anim={
left:-(menu.rightMenu.width==Ti.UI.FILL?menu.rightMenu.width=defaultMenuWidth:menu.rightMenu.width||defaultMenuWidth),
width:device.width,
duration:slideMenuSpeed};


rootWindow?
rootWindow.animate(anim):

rootView.animate(anim);

}

slideMenuStyle==exports.SLIDEMENU_COVER&&(

menu.rightMenu.applyProperties({
left:device.width,
width:menu.rightMenu.width==Ti.UI.FILL?menu.rightMenu.width=defaultMenuWidth:menu.rightMenu.width||defaultMenuWidth}),


menu.rightMenu.animate({
left:device.width-menu.rightMenu.width,
duration:slideMenuSpeed})),



menu.menuOpen=!0,
menu.openedMenu="right",

menu.rightMenu.addEventListener("click",open=function(e){
menu.rightMenu.removeEventListener("click",open),
hideOpenMenu();
});
}

function showLeftMenu(){

if(Ti.API.info("$$$$$$$$$$$$ !menu.leftMenu $$$$$$$$$$$$"+!menu.leftMenu),!menu.leftMenu){
throw"No left SlideMenu is defined";
return;
}






if(util.log("opening left menu"),menu.rightMenu&&menu.rightMenu.setVisible(!1),menu.leftMenu&&menu.leftMenu.setVisible(!0),slideMenuStyle==exports.SLIDEMENU_PUSH){

var anim={
left:menu.leftMenu.width==Ti.UI.FILL?menu.leftMenu.width=defaultMenuWidth:menu.leftMenu.width||defaultMenuWidth,
width:device.width,
duration:slideMenuSpeed};


rootWindow?
rootWindow.animate(anim):

rootView.animate(anim);

}

slideMenuStyle==exports.SLIDEMENU_COVER&&(

menu.leftMenu.applyProperties({
left:0-device.width,
width:menu.leftMenu.width==Ti.UI.FILL?menu.leftMenu.width=defaultMenuWidth:menu.leftMenu.width||defaultMenuWidth}),

Ti.API.info("MENU $$$$$$$$$ "+JSON.stringify(menu.leftMenu)),
menu.leftMenu.animate({
left:0,
duration:slideMenuSpeed})),



menu.menuOpen=!0,
menu.openedMenu="left",

menu.leftMenu.addEventListener("click",open=function(e){
menu.leftMenu.removeEventListener("click",open),
hideOpenMenu();
});
}

function showTopMenu(){

if(!menu.bottomMenu){
throw"No Top SlideMenu is defined";
return;
}








if(util.log("opening top menu"),menu.topMenu&&menu.topMenu.setVisible(!0),menu.bottomMenu&&menu.bottomMenu.setVisible(!1),menu.leftMenu&&menu.leftMenu.setVisible(!1),menu.rightMenu&&menu.rightMenu.setVisible(!1),slideMenuStyle==exports.SLIDEMENU_PUSH){

menu.topMenu.setTop(0),

rootWindow?
rootWindow.setTop(1):

rootView.setTop(1);


var anim={
top:device.height-20,
height:device.height,
duration:slideMenuSpeed};


rootWindow?
rootWindow.animate(anim):

rootView.animate(anim);

}

slideMenuStyle==exports.SLIDEMENU_COVER&&(

menu.topMenu.applyProperties({
top:0-device.height,
bottom:null,
height:device.height,
width:menu.topMenu.width}),


menu.topMenu.animate({
top:0,
duration:slideMenuSpeed})),



menu.menuOpen=!0,
menu.openedMenu="top",

menu.topMenu.addEventListener("click",open=function(e){
menu.topMenu.removeEventListener("click",open),
hideOpenMenu();
});
}

function showBottomMenu(){

if(!menu.bottomMenu){
throw"No top SlideMenu is defined";
return;
}







if(util.log("opening top menu"),menu.bottomMenu&&menu.bottomMenu.setVisible(!0),menu.leftMenu&&menu.leftMenu.setVisible(!1),menu.rightMenu&&menu.rightMenu.setVisible(!1),slideMenuStyle==exports.SLIDEMENU_PUSH){

menu.bottomMenu.setTop(0),

rootWindow?
rootWindow.setBottom(1):

rootView.setBottom(1);


var anim={
top:20-device.height,
height:device.height,
duration:slideMenuSpeed};


rootWindow?
rootWindow.animate(anim):

rootView.animate(anim);

}

slideMenuStyle==exports.SLIDEMENU_COVER&&(

menu.bottomMenu.applyProperties({
top:device.height-1,
width:menu.bottomMenu.width}),


menu.bottomMenu.animate({
top:0,
duration:slideMenuSpeed})),



menu.menuOpen=!0,
menu.openedMenu="bottom",

menu.bottomMenu.addEventListener("click",open=function(e){
menu.bottomMenu.removeEventListener("click",open),
hideOpenMenu();
});
}

function hideOpenMenu(){
if(slideMenuStyle==exports.SLIDEMENU_PUSH){

var anim={
left:0,
top:0,
duration:slideMenuSpeed};


rootWindow?
rootWindow.animate(anim,hideAllMenus):

rootView.animate(anim,hideAllMenus);

}

slideMenuStyle==exports.SLIDEMENU_COVER&&(
"left"==menu.openedMenu&&
menu.leftMenu.animate({
left:0-device.width,
duration:slideMenuSpeed}),



"right"==menu.openedMenu&&
menu.rightMenu.animate({
left:device.width,
duration:slideMenuSpeed}),



"top"==menu.openedMenu&&
menu.topMenu.animate({
top:0-device.height,
duration:slideMenuSpeed}),



"bottom"==menu.openedMenu&&
menu.bottomMenu.animate({
top:device.height,
duration:slideMenuSpeed})),




menu.menuOpen=!1,
menu.openedMenu=null;
}

















































return exports.hideOpenMenu=hideOpenMenu,exports.createLeftMenu=function(args){return menu.leftMenu=args.src?getController(args.src).getView():Ti.UI.createView(),menu.leftMenu.UI&&(menu.leftMenu=menu.leftMenu.getView()),slideMenuStyle==exports.SLIDEMENU_COVER&&(menu.leftMenu.width=menu.leftMenu.width||defaultMenuWidth),menu.leftMenu.left=0,menu.leftMenu.visible=!1,menu.leftMenu},exports.createRightMenu=function(args){return menu.rightMenu=args.src?getController(args.src).getView():Ti.UI.createView(),menu.rightMenu.UI&&(menu.rightMenu=menu.rightMenu.getView()),menu.rightMenu.left=device.width-100,menu.rightMenu.setVisible(!1),menu.rightMenu},exports.createBottomMenu=function(args){return menu.bottomMenu=args.src?getController(args.src).getView():Ti.UI.createView(),menu.bottomMenu.UI&&(menu.bottomMenu=menu.bottomMenu.getView()),menu.bottomMenu.top=device.height,menu.bottomMenu.setVisible(!1),menu.bottomMenu},exports.createTopMenu=function(args){return menu.topMenu=args.src?getController(args.src).getView():Ti.UI.createView(),menu.topMenu.UI&&(menu.topMenu=menu.topMenu.getView()),menu.topMenu.top=0,menu.topMenu.setVisible(!1),menu.topMenu},menu=Ti.UI.createView(args),menuWindow=Ti.UI.createWindow({backgroundColor:"#555"}),menuWindow.open(),menu.applyProperties({visible:!1}),slideMenuStyle==exports.SLIDEMENU_COVER&&menu.setZIndex(1e3),menu.addEventListener("postlayout",postlayout=function(){menu.removeEventListener("postlayout",postlayout),menu.setVisible(!0),rootWindow&&slideMenuStyle==exports.SLIDEMENU_COVER?[menu.leftMenu,menu.rightMenu,menu.bottomMenu,menu.topMenu].forEach(function(menuView){menuView&&rootWindow.add(menuView)}):[menu.leftMenu,menu.rightMenu,menu.bottomMenu,menu.topMenu].forEach(function(menuView){rootWindow&&menuWindow.add(menuView)}),exports.slideMenu=menu}),exports.navigator.toggleBottomMenu=function(){menu.menuOpen?hideOpenMenu():showBottomMenu()},exports.navigator.toggleTopMenu=function(){menu.menuOpen?hideOpenMenu():showTopMenu()},exports.navigator.toggleLeftMenu=function(){Ti.API.info("$$$$$$$$$$$$ toggleLeftMenu $$$$$$$$$$$$"),menu.menuOpen?(Ti.API.info("$$$$$$$$$$$$ menu.menuOpen $$$$$$$$$$$$"),hideOpenMenu()):(Ti.API.info("$$$$$$$$$$$$ !menu.menuOpen $$$$$$$$$$$$"),showLeftMenu())},exports.navigator.toggleRightMenu=function(){menu.menuOpen?hideOpenMenu():showRightMenu()},menu.hideMenu=function(i){hideOpenMenu()},menu.showLeftMenu=function(i){showLeftMenu()},menu.showRightMenu=function(){showRightMenu()},menu;
},

exports.showActivity=function(text,parent){

rootWindow&&(
parent=rootWindow);


var loadingIndicator,blockerView;

exports.hideActivity=function(){
clearTimeout(timer),

loadingIndicator&&(
loadingIndicator.hide(),
parent.remove(loadingIndicator),
parent.remove(blockerView),
blockerView=null,
loadingIndicator=null);

};

var timer=setTimeout(function(){

blockerView=Ti.UI.createView({
width:Ti.UI.FILL,
height:Ti.UI.FILL,
backgroundColor:"#000",
opacity:.5,
zIndex:1e3}),


loadingIndicator=Ti.UI.createActivityIndicator({
color:"#fff",
width:150,
height:50,
font:{
fontSize:!0?14:16,
fontFamily:!0?"HelveticaNeue-light":"helvetica",
fontWeight:!0?"light":"normal"},

borderRadius:8,
backgroundColor:!0?"transparent":"#333",
message:" "+(text||"Processing"),
style:!1?Ti.UI.ActivityIndicatorStyle.DARK:null,
zIndex:1e4}),


parent.add(blockerView),
parent.add(loadingIndicator),

loadingIndicator.show();
},10);
};